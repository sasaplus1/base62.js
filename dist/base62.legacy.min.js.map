{"version":3,"file":"base62.legacy.min.js","sources":["../index.ts"],"sourcesContent":["const basicTable =\n  '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n/**\n * create index map\n *\n * @param table base62 string table\n */\nfunction createIndexMap(table: string = basicTable): { [key: string]: number } {\n  return table\n    .split('')\n    .reduce(function(result: { [key: string]: number }, value, index) {\n      result[value] = index;\n      return result;\n    }, {});\n}\n\nconst basicIndexMap = createIndexMap();\n\n/**\n * decode to decimal number from base62 string\n *\n * @param str base62 string\n * @param [baseTable=basicTable] base62 table\n * @throws {TypeError} str is not a string\n * @throws {Error} str is unexpected format\n * @throws {Error} baseTable is not 62 in length\n */\nexport function decode(str: string, baseTable = basicTable): number {\n  if (typeof str !== 'string') {\n    throw new TypeError(`str must be a string: ${str}`);\n  }\n\n  if (!/^-?[\\dA-Za-z]+$/.test(str)) {\n    throw new Error(`unexpected format: ${str}`);\n  }\n\n  if (baseTable.length !== 62) {\n    throw new Error('baseTable must be 62 in length');\n  }\n\n  const indexMap =\n    baseTable === basicTable ? basicIndexMap : createIndexMap(baseTable);\n\n  const isNegative = str[0] === '-';\n\n  const numbers = (isNegative ? str.slice(1) : str).split('');\n  const numbersLength = numbers.length;\n\n  const result = numbers.reduce(function(result, n, index) {\n    return result + indexMap[n] * Math.pow(62, numbersLength - index - 1);\n  }, 0);\n\n  return isNegative ? -result : result;\n}\n\n/**\n * encode to base62 string from number\n *\n * @param num integer\n * @param [baseTable=basicTable] base62 table\n * @throws {TypeError} num is not an Integer\n * @throws {Error} baseTable is not 62 in length\n */\nexport function encode(num: number, baseTable = basicTable): string {\n  if (!Number.isSafeInteger(num)) {\n    throw new TypeError(`num is must be an Integer: ${num}`);\n  }\n\n  if (baseTable.length !== 62) {\n    throw new Error('baseTable must be 62 in length');\n  }\n\n  if (num === 0) {\n    return '0';\n  }\n\n  const result = [];\n\n  let n = Math.abs(num);\n\n  while (n > 0) {\n    result.unshift(baseTable[n % 62]);\n    n = Math.floor(n / 62);\n  }\n\n  return num < 0 ? `-${result.join('')}` : result.join('');\n}\n"],"names":["basicTable","createIndexMap","table","split","reduce","result","value","index","basicIndexMap","str","baseTable","TypeError","test","Error","length","indexMap","isNegative","numbers","slice","numbersLength","n","Math","pow","num","Number","isSafeInteger","abs","unshift","floor","join"],"mappings":";;;;;mMAAA,IAAMA,EACJ,iEAOF,SAASC,EAAeC,GACtB,oBADsBA,KACfA,EACJC,MAAM,IACNC,OAAO,SAASC,EAAmCC,EAAOC,GAEzD,OADAF,EAAOC,GAASC,EACTF,GACN,IAGP,IAAMG,EAAgBP,sBAWCQ,EAAaC,GAClC,gBADkCA,KACf,iBAARD,EACT,MAAM,IAAIE,UAAU,yBAAyBF,GAG/C,IAAK,kBAAkBG,KAAKH,GAC1B,MAAM,IAAII,MAAM,sBAAsBJ,GAGxC,GAAyB,KAArBC,EAAUI,OACZ,MAAM,IAAID,MAAM,kCAGlB,IAAME,EACJL,IAAcV,EAAaQ,EAAgBP,EAAeS,GAEtDM,EAAwB,MAAXP,EAAI,GAEjBQ,GAAWD,EAAaP,EAAIS,MAAM,GAAKT,GAAKN,MAAM,IAClDgB,EAAgBF,EAAQH,OAExBT,EAASY,EAAQb,OAAO,SAASC,EAAQe,EAAGb,GAChD,OAAOF,EAASU,EAASK,GAAKC,KAAKC,IAAI,GAAIH,EAAgBZ,EAAQ,IAClE,GAEH,OAAOS,GAAcX,EAASA,qBAWTkB,EAAab,GAClC,gBADkCA,MAC7Bc,OAAOC,cAAcF,GACxB,MAAM,IAAIZ,UAAU,8BAA8BY,GAGpD,GAAyB,KAArBb,EAAUI,OACZ,MAAM,IAAID,MAAM,kCAGlB,GAAY,IAARU,EACF,MAAO,IAOT,IAJA,IAAMlB,EAAS,GAEXe,EAAIC,KAAKK,IAAIH,GAEVH,EAAI,GACTf,EAAOsB,QAAQjB,EAAUU,EAAI,KAC7BA,EAAIC,KAAKO,MAAMR,EAAI,IAGrB,OAAOG,EAAM,EAAI,IAAIlB,EAAOwB,KAAK,IAAQxB,EAAOwB,KAAK"}